# =======================
# Shiro INI configuration
# =======================

[main]
# Objects and their properties are defined here,
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager

#authenticator
authenticator = org.eclipse.kapua.service.authentication.shiro.KapuaAuthenticator
securityManager.authenticator = $authenticator

#
# Auth filters
# kapuaAuthcAccessToken = org.eclipse.kapua.app.api.auth.KapuaTokenAuthenticationFilter

#cacheManager = org.eclipse.kapua.broker.core.experimental.CacheManager
#securityManager.cacheManager = $cacheManager

##########
# Realms #
##########
# Login
kapuaUserPassAuthenticatingRealm = org.eclipse.kapua.service.authentication.shiro.realm.UserPassAuthenticatingRealm

# Session
kapuaAccessTokenAuthenticatingRealm = org.eclipse.kapua.service.authentication.shiro.realm.AccessTokenAuthenticatingRealm

########################
#Authorization section #
########################
# Authorization
kapuaAuthorizingRealm = org.eclipse.kapua.service.authorization.shiro.KapuaAuthorizingRealm
#removed from realms the authorizing realm (kapuaAuthorizingRealm) since it will be defined into the new Authorizer component
securityManager.realms = $kapuaAccessTokenAuthenticatingRealm, $kapuaUserPassAuthenticatingRealm

authorizer = org.eclipse.kapua.service.security.EnhModularRealmAuthorizer
#realms must be set again otherwise the authorizer will not have any.
#The security manager (AuthorizingSecurityManager) is built in this way:
#    AuthorizingSecurityManager()         //constructor
#    setRealms(realms)                    //set realms (if any)
#    afterRealmsSet()                     //set realms to authenticator (if any)
#    setAuthorizer(Authorizer authorizer) //if any configured
#    setAuthenticator()                   //if any custom authenticator is set
#In this way the new authenticator must have the realms already configured once is set to the security manager.
#Otherwise the security manager doesn't set it's own security manager to the authenticator
authorizer.realms = $kapuaAuthorizingRealm
securityManager.authorizer = $authorizer

# SessionListeners only works with in the native SessionMode
# This is not the mode we use when running in Tomcat.
#securityManager.sessionMode = native
securityManager.sessionManager.globalSessionTimeout = -1
securityManager.sessionManager.sessionValidationSchedulerEnabled = false

securityManager.subjectDAO.sessionStorageEvaluator.sessionStorageEnabled = false

[users]
# The 'users' section is for simple deployments
# when you only need a small number of statically-defined
# set of User accounts.

[roles]
# The 'roles' section is for simple deployments
# when you only need a small number of statically-defined
# roles.

[urls]
# The 'urls' section is used for url-based security
# in web applications.  We'll discuss this section in the
# Web documentation
