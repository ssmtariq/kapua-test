<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) 2016, 2022 Eurotech and/or its affiliates and others

    This program and the accompanying materials are made
    available under the terms of the Eclipse Public License 2.0
    which is available at https://www.eclipse.org/legal/epl-2.0/

    SPDX-License-Identifier: EPL-2.0

    Contributors:
        Eurotech - initial API and implementation
        Red Hat Inc
 -->

<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd


         http://camel.apache.org/schema/spring
         http://camel.apache.org/schema/spring/camel-spring-2.15.1.xsd">

    <!-- Configure the ActiveMQ broker connection -->
    <!-- we can use also the tcp regular connection. it should be no performance difference! -->
    <bean id="kapuaConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory" depends-on="message-broker-id">
        <property name="brokerURL" value="vm://message-broker?create=false"/>
    </bean>

    <bean id="cachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <property name="targetConnectionFactory" ref="kapuaConnectionFactory"/>
    </bean>

    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="cachingConnectionFactory"/>
        <!-- we can remove this setting because is overwritten by the concurrent consumer on jms route -->
        <property name="concurrentConsumers" value="10"/>
        <property name="cacheLevelName" value="CACHE_CONSUMER"/>
    </bean>

    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
    </bean>
    <!--  create connection pooling!!! -->

    <!-- session filers (to bind Kapua and Shiro thread context) -->
    <bean id="kapuaCamelFilter" class="org.eclipse.kapua.broker.core.converter.KapuaCamelFilter">
    </bean>

    <bean id="kapuaCamelDefaultRouter" class="org.eclipse.kapua.broker.core.router.CamelKapuaDefaultRouter">
    </bean>
    <!-- Converter -->
    <bean id="kapuaDataConverter" class="org.eclipse.kapua.broker.core.converter.KapuaDataConverter"/>
    <bean id="deviceManagementNotificationConverter" class="org.eclipse.kapua.broker.core.converter.DeviceManagementNotificationConverter"/>
    <bean id="kapuaLifeCycleConverter" class="org.eclipse.kapua.broker.core.converter.KapuaLifeCycleConverter"/>

    <!-- Consumer -->
    <!-- ASSISTANTS -->
    <bean id="deviceMessageListener" class="org.eclipse.kapua.broker.core.listener.DeviceMessageListener">
    </bean>
    <bean id="dataStorageMessageProcessor" class="org.eclipse.kapua.broker.core.listener.DataStorageMessageProcessor">
    </bean>
    <bean id="deviceManagementNotificationMessageProcessor" class="org.eclipse.kapua.broker.core.listener.DeviceManagementNotificationMessageProcessor"></bean>
    <!-- ERROR -->
    <bean id="errorMessageListener" class="org.eclipse.kapua.broker.core.listener.ErrorMessageListener">
    </bean>

    <camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
        <!-- the beans are defined as spring bean so check if it's possible to remove the package scan at all. Remove also the endpoint annotation from the pojo endpoints and all should works. -->
        <packageScan>
            <package>org.ecplise.kapua</package>
            <excludes>**.*Excluded*</excludes>
            <includes>**.*</includes>
        </packageScan>
        <!-- exception/error handler -->
        <!--
        by default the errorHandler forward the message to a dead letter queue but in that way we lose the failure end point
        deadLetterUri="activemq:queue:processedMessageWithError"
        if we forward the message directly to an end point with the exchange in the signature
        deadLetterUri="bean:errorMessagePojo?method=processMessage"
        we have these properties evaluated (in the exchange field)
        CamelFailureRouteId
        CamelFailureEndpoint
        CamelExceptionCaught
        (others useful fields CamelMulticastIndex - CamelMessageHistory - CamelCreatedTimestamp)
        -->
        <errorHandler id="mainRouteMessageErrorHandler" redeliveryPolicyRef="kapuaRedeliveryPolicy"
                      type="DeadLetterChannel"
                      deadLetterUri="activemq:queue:notProcessableMessage"
                      useOriginalMessage="true">
        </errorHandler>
        <errorHandler id="messageErrorHandler" redeliveryPolicyRef="kapuaErrorRedeliveryPolicy"
                      type="DeadLetterChannel"
                      deadLetterUri="activemq:queue:notProcessableMessage"
                      useOriginalMessage="true">
        </errorHandler>
        <redeliveryPolicyProfile id="kapuaRedeliveryPolicy" maximumRedeliveries="0" redeliveryDelay="0" retryAttemptedLogLevel="WARN" logRetryAttempted="true"/>
        <redeliveryPolicyProfile id="kapuaErrorRedeliveryPolicy" maximumRedeliveries="0" redeliveryDelay="0" retryAttemptedLogLevel="WARN" logRetryAttempted="true"/>
        <!--
        For the transaction/acknowledge mode please follow http://stackoverflow.com/questions/13498652/camel-jms-client-acknowledge-mode

        Camel uses spring MessageListenerContainers.
        The AbstractMessageListenerContainer, in case of CLIENT_AKNOWLEDGE mode, invokes comitIfNecessary method acknowledging message.
        This happens only AFTER registered MessageListener processes message successfully (no exceptions)

        Camel uses EndpointMessageListener which, eventually, invokes process method of next processor (or Producer) down the route.
        As this is classic chain of responsibilities, if any processor down the route throws exception or sets exception on the Exchange,
        it will be re-thrown by EndpointMessageListener preventing the AbstractMessageListener to acknowledge message.

        So the camel-jms connections CONFIGURATION TESTED are:
        acknowledgementModeName=CLIENT_ACKNOWLEDGE
        transacted=false
        -->
        <route errorHandlerRef="mainRouteMessageErrorHandler" id="mainKapuaRoute">
            <from uri="activemq:queue:Consumer.eurotech:mainRoutelisteners:EXACTLY_ONCE.VirtualTopic.>?asyncConsumer=false&amp;acknowledgementModeName=CLIENT_ACKNOWLEDGE&amp;transacted=false&amp;concurrentConsumers=20&amp;maxConcurrentConsumers=50"/>
            <!--  handling timeout and communication exceptions in a retry queue -->
            <onException>
                <exception>org.eclipse.kapua.service.datastore.internal.mediator.DatastoreCommunicationException</exception>
                <redeliveryPolicy maximumRedeliveries="0" logRetryAttempted="true" retryAttemptedLogLevel="WARN"/>
                <handled>
                    <constant>true</constant>
                </handled>
                <bean ref="kapuaCamelFilter" method="bridgeError"/>
                <to uri="activemq:queue:storeCommunicationException"/>
            </onException>
            <!-- handling configuration error -->
            <onException>
                <exception>org.eclipse.kapua.service.datastore.internal.mediator.ConfigurationException</exception>
                <redeliveryPolicy maximumRedeliveries="0" logRetryAttempted="true" retryAttemptedLogLevel="WARN"/>
                <handled>
                    <constant>true</constant>
                </handled>
                <bean ref="kapuaCamelFilter" method="bridgeError"/>
                <to uri="activemq:queue:storeConfigurationException"/>
            </onException>
            <onException>
                <exception>org.eclipse.kapua.service.datastore.internal.mediator.DatastoreException</exception>
                <redeliveryPolicy maximumRedeliveries="0" logRetryAttempted="true" retryAttemptedLogLevel="WARN"/>
                <handled>
                    <constant>true</constant>
                </handled>
                <bean ref="kapuaCamelFilter" method="bridgeError"/>
                <to uri="activemq:queue:storeGenericException"/>
            </onException>
            <onException>
                <exception>org.eclipse.kapua.KapuaException</exception>
                <redeliveryPolicy maximumRedeliveries="0" logRetryAttempted="true" retryAttemptedLogLevel="WARN"/>
                <handled>
                    <constant>true</constant>
                </handled>
                <bean ref="kapuaCamelFilter" method="bridgeError"/>
                <to uri="activemq:queue:notProcessableMessage"/>
            </onException>
            <pipeline>
                <doTry>
                    <bean ref="kapuaCamelFilter" method="bindSession"/>
                    <dynamicRouter>
                        <method ref="kapuaCamelDefaultRouter" method="defaultRoute"></method>
                    </dynamicRouter>
                    <doFinally>
                        <bean ref="kapuaCamelFilter" method="unbindSession"/>
                    </doFinally>
                </doTry>
            </pipeline>
        </route>
        <route errorHandlerRef="messageErrorHandler" id="dataMessageCommunicationErrorRoute">
            <from uri="activemq:queue:storeCommunicationException?asyncConsumer=false&amp;acknowledgementModeName=CLIENT_ACKNOWLEDGE&amp;transacted=false&amp;concurrentConsumers=2&amp;maxConcurrentConsumers=5"/>
            <pipeline>
                <delay>
                    <constant>1000</constant>
                </delay>
                <bean ref="kapuaCamelFilter" method="bindSession"/>
                <bean ref="kapuaDataConverter" method="convertToDataOnException"/>
                <to uri="bean:dataStorageMessageProcessor?method=processCommunicationErrorMessage"/>
                <bean ref="kapuaCamelFilter" method="unbindSession"/>
            </pipeline>
        </route>
        <route errorHandlerRef="messageErrorHandler" id="dataMessageConfigurationErrorRoute">
            <from uri="activemq:queue:storeConfigurationException?asyncConsumer=false&amp;acknowledgementModeName=CLIENT_ACKNOWLEDGE&amp;transacted=false&amp;concurrentConsumers=2&amp;maxConcurrentConsumers=5"/>
            <pipeline>
                <delay>
                    <constant>1000</constant>
                </delay>
                <bean ref="kapuaCamelFilter" method="bindSession"/>
                <bean ref="kapuaDataConverter" method="convertToDataOnException"/>
                <to uri="bean:dataStorageMessageProcessor?method=processConfigurationErrorMessage"/>
                <bean ref="kapuaCamelFilter" method="unbindSession"/>
            </pipeline>
        </route>
        <route errorHandlerRef="messageErrorHandler" id="dataMessageGenericErrorRoute">
            <from uri="activemq:queue:storeGenericException?asyncConsumer=false&amp;acknowledgementModeName=CLIENT_ACKNOWLEDGE&amp;transacted=false&amp;concurrentConsumers=2&amp;maxConcurrentConsumers=5"/>
            <pipeline>
                <delay>
                    <constant>1000</constant>
                </delay>
                <bean ref="kapuaCamelFilter" method="bindSession"/>
                <bean ref="kapuaDataConverter" method="convertToDataOnException"/>
                <to uri="bean:dataStorageMessageProcessor?method=processGenericErrorMessage"/>
                <bean ref="kapuaCamelFilter" method="unbindSession"/>
            </pipeline>
        </route>
        <route id="notProcessableMessage">
            <from uri="activemq:queue:notProcessableMessage?asyncConsumer=false&amp;acknowledgementModeName=CLIENT_ACKNOWLEDGE&amp;transacted=false&amp;concurrentConsumers=2&amp;maxConcurrentConsumers=5"/>
            <pipeline>
                <bean ref="kapuaCamelFilter" method="bindSession"/>
                <to uri="bean:errorMessageListener?method=processMessage"/>
                <bean ref="kapuaCamelFilter" method="unbindSession"/>
            </pipeline>
        </route>
    </camelContext>
</beans>
