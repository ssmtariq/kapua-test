<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) 2016, 2022 Eurotech and/or its affiliates and others

    This program and the accompanying materials are made
    available under the terms of the Eclipse Public License 2.0
    which is available at https://www.eclipse.org/legal/epl-2.0/

    SPDX-License-Identifier: EPL-2.0

    Contributors:
        Eurotech - initial API and implementation
        Red Hat Inc
 -->
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://activemq.apache.org/schema/core
         http://activemq.apache.org/schema/core/activemq-core.xsd
         http://camel.apache.org/schema/spring
         http://camel.apache.org/schema/spring/camel-spring-2.15.1.xsd
         http://www.springframework.org/schema/util
         http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:src/test/resources/credentials.properties</value>
        </property>
    </bean>

    <bean xmlns="http://www.springframework.org/schema/beans"
        id="jaxbContextLoader"
        class="org.eclipse.kapua.broker.core.KapuaBrokerJAXBContextLoader"
        init-method="init"/>
    <bean xmlns="http://www.springframework.org/schema/beans"
        id="databaseCheckUpdate"
        class="org.eclipse.kapua.broker.core.KapuaDatabaseCheckUpdate"
        depends-on="jaxbContextLoader"/>
    <bean xmlns="http://www.springframework.org/schema/beans"
        id="applicationPlugin"
        class="org.eclipse.kapua.broker.core.KapuaBrokerApplicationPlugin"
        depends-on="databaseCheckUpdate"/>
    <bean xmlns="http://www.springframework.org/schema/beans"
        id="securityPlugin"
        class="org.eclipse.kapua.broker.core.KapuaBrokerSecurityPlugin"
        depends-on="applicationPlugin"/>

    <broker xmlns="http://activemq.apache.org/schema/core"
            brokerName="message-broker"
            id="message-broker-id"
            persistent="true"
            dataDirectory="./data"
            schedulePeriodForDestinationPurge="-1"
            networkConnectorStartAsync="true"
            restartAllowed="false" useJmx="false" advisorySupport="false">

        <destinationPolicy>
            <policyMap>
                <policyEntries>
                    <policyEntry topic=">"
                                 producerFlowControl="true"
                                 durableTopicPrefetch="32766"
                                 topicPrefetch="32766"
                                 expireMessagesPeriod="300000"
                                 enableAudit="false"
                                 minimumMessageSize="256"
                                 advisoryForSlowConsumers="true"
                                 advisoryForFastProducers="true"
                                 advisoryWhenFull="true"
                                 advisoryForDiscardingMessages="true"
                                 gcInactiveDestinations="true"
                                 inactiveTimeoutBeforeGC="300000">
                        <pendingSubscriberPolicy>
                            <vmCursor/>
                        </pendingSubscriberPolicy>
                        <!--
                            Limit of messages sent to the consumer but not yet acknowledged.
                            The settings is per consumer so setting it to 1000.
                            http://activemq.apache.org/slow-consumer-handling.html
                        -->
                        <pendingMessageLimitStrategy>
                            <constantPendingMessageLimitStrategy limit="1000"/>
                        </pendingMessageLimitStrategy>
                        <subscriptionRecoveryPolicy>
                            <noSubscriptionRecoveryPolicy/>
                        </subscriptionRecoveryPolicy>
                        <deadLetterStrategy>
                            <sharedDeadLetterStrategy processExpired="false"/>
                        </deadLetterStrategy>
                    </policyEntry>

                    <!--
                        queuePrefetch: if you have just a single consumer attached to a queue, you can leave the prefetch limit at a fairly large value.
                        But if you are using a group of consumers to distribute the workload, it is usually better to restrict the prefetch limit to
                        a very small number—for example, 0 or 1.
                        http://activemq.apache.org/per-destination-policies.html
                        Retest with default prefetch of 1000. Is it better than 2?
                    -->
                    <policyEntry queue=">"
                                 producerFlowControl="true"
                                 optimizedDispatch="true"
                                 queuePrefetch="2"
                                 expireMessagesPeriod="300000"
                                 enableAudit="false"
                                 useConsumerPriority="false"
                                 minimumMessageSize="256"
                                 advisoryForSlowConsumers="true"
                                 advisoryForFastProducers="true"
                                 advisoryWhenFull="true"
                                 gcInactiveDestinations="true"
                                 inactiveTimeoutBeforeGC="300000">
                        <pendingSubscriberPolicy>
                            <vmCursor/>
                        </pendingSubscriberPolicy>
                        <deadLetterStrategy>
                            <sharedDeadLetterStrategy processExpired="false"/>
                        </deadLetterStrategy>
                    </policyEntry>
                </policyEntries>
            </policyMap>
        </destinationPolicy>

        <!-- commented to remove all jmx management -->
        <!--
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>
        -->

        <persistenceAdapter>
            <!--
                indexCacheSize—(default 10000) specifies the size of the cache in units of pages (where one page is 4 KB by default).
                https://access.redhat.com/documentation/en-US/Fuse_ESB_Enterprise/7.1/html/ActiveMQ_Tuning_Guide/files/PersTuning-KahaDB.html
            -->
            <kahaDB directory="${KAHA_DB_DIRECTORY}"
                    journalMaxFileLength="32mb"
                    concurrentStoreAndDispatchQueues="true"
                    concurrentStoreAndDispatchTopics="false"
                    indexWriteBatchSize="10000"
                    indexCacheSize="100000"
                    enableJournalDiskSyncs="false"/>
        </persistenceAdapter>

        <plugins>
            <ref xmlns="http://www.springframework.org/schema/beans" bean="applicationPlugin"/>
            <ref xmlns="http://www.springframework.org/schema/beans" bean="securityPlugin"/>
            <discardingDLQBrokerPlugin dropAll="true"
                                       dropTemporaryTopics="true"
                                       dropTemporaryQueues="true"/>
        </plugins>


        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="6 gb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="10 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="1 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!--
        <sslContext>
            <sslContext keyStore="${certificatesHome}/kapua.ks" keyStorePassword="${keystorePassword}"/>
        </sslContext>
        -->

        <transportConnectors>
            <transportConnector name="mqtt"
                                uri="mqtt+nio://0.0.0.0:1883?transport.maximumConnections=1000&amp;transport.socketBufferSize=131072&amp;transport.ioBufferSize=16384&amp;transport.activeMQSubscriptionPrefetch=32766&amp;transport.publishDollarTopics=true&amp;transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>
            <transportConnector name="internalMqtt"
                                uri="mqtt+nio://0.0.0.0:1893?transport.defaultKeepAlive=60000&amp;transport.maximumConnections=1000&amp;transport.socketBufferSize=131072&amp;transport.ioBufferSize=16384&amp;transport.activeMQSubscriptionPrefetch=32766&amp;transport.publishDollarTopics=true&amp;transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>
            <transportConnector name="mqtts"
                                uri="mqtt+nio+ssl://0.0.0.0:8883?transport.maximumConnections=1000&amp;transport.socketBufferSize=131072&amp;transport.ioBufferSize=16384&amp;transport.activeMQSubscriptionPrefetch=32766&amp;transport.publishDollarTopics=true&amp;transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>
            <transportConnector name="tcp"
                                uri="tcp://0.0.0.0:61616?transport.maximumConnections=1000&amp;transport.socketBufferSize=131072&amp;ioBufferSize=16384&amp;transport.activeMQSubscriptionPrefetch=32766&amp;transport.publishDollarTopics=true&amp;transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>
            <!--transportConnector name="ws"
                                uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;transport.publishDollarTopics=true&amp;transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/-->
        </transportConnectors>
        <!-- NOTE:
        The following template shows how to configure a network of brokers (i.e. a broker cluster).
        A network connector creates a connection to another broker node, and you can define a connection to each of the other broker nodes to create the cluster.
        In order to detect two clients using the same id (stealing link) within the network of brokers, the network connector MUST be configured to forward the connect messages generated by the broker to the other nodes in the cluster.
        For additional documentation regarding network connectors, please refer to http://activemq.apache.org/networks-of-brokers.html
           1) The security plugin doesn't enforce authentication/authorization for that type of connectors so enforce the security at the network layer (so the username and password fields are omitted in this configuration)
           2) Create a network connector entry for each broker node of the cluster.
              The name of the connector must be unique in a broker node, so to easily avoid collision just use the pattern "broker_${current_node_id}_${remote_node_id}"
           3) The uri should use the tcp schema and use the port configured in the transport connector defined in the section above (named tcp). The default port is 61616.
              As alternative, a list of brokers can be specified ( "static:(tcp://broker_2_ip_or_name:61616,tcp://broker_3_ip_or_name:61616,.....)" ) to avoid defining a new networkConnector tag for each of them.
           4) messageTTL and consumerTTL are set to prevent message loop and to not forwarding the subscriptions. Any change can affect the system stability and/or performance.
           5) excluded/included destinations are set to forward only the MQTT/CONNECT messages. Any change can affect the system stability and/or performance.
        -->
        <!-- messageTTL: messages can pass through 2 brokers (this, and one peer) -->
        <!-- consumerTTL: subscriptions are not forwarded to other brokers -->
        <!-- duplex: one way connection (false) -->
        <!-- dynamicOnly: allow static -->
        <!--
        <networkConnectors>
            <networkConnector name="broker_1_to_2"
                uri="static:(tcp://broker_2_ip_or_name:61616)"
                messageTTL="1"
                consumerTTL="0"
                duplex="false"
                dynamicOnly="false" >
                <excludedDestinations>
                    <queue name="Consumer.*.VirtualTopic.>" />
                    <queue name="VirtualTopic.>" />
                    <topic name="VirtualTopic.>" />
                    <tempQueue name="Consumer.*.VirtualTopic.>" />
                    <tempTopic name="VirtualTopic.>" />
                </excludedDestinations>
                <staticallyIncludedDestinations>
                    <topic name="VirtualTopic.${MESSAGE_CLASSIFIER}.*.*.MQTT.CONNECT"></topic>
                </staticallyIncludedDestinations>
            </networkConnector>
        </networkConnectors>
        -->
    </broker>

    <import resource="camel.xml"/>
    <!--<import resource="camel-experimental.xml"/>-->

</beans>
