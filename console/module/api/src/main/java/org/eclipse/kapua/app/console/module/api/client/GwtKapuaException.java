/*******************************************************************************
 * Copyright (c) 2017, 2022 Eurotech and/or its affiliates and others
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Eurotech - initial API and implementation
 *******************************************************************************/
package org.eclipse.kapua.app.console.module.api.client;

import com.google.gwt.core.client.GWT;
import org.eclipse.kapua.app.console.module.api.client.messages.ValidationMessages;

import java.util.MissingResourceException;

/**
 * The GwtKapuaException class is the superclass of all GWT errors and exceptions in the Kapua project. It extends the JDK Exception class by requesting its invokers to provide an error code
 * when
 * building its instances. The code is one value of KapuaErrorCode enum; the code is used to document the possible error conditions generated by the platform as well as to identify the localized
 * exception messages to be reported. Exceptions messages are stored in the KapuaExceptionMessagesBundle Properties Bundle and they are keyed on the exception code.
 */
public class GwtKapuaException extends Exception {

    private static final long serialVersionUID = -2843620194094802461L;

    protected GwtKapuaErrorCode errorCode;
    protected String[] arguments;
    protected Integer remainingLoginAttempts;

    private GwtKapuaException() {
        super();
    }

    public GwtKapuaException(String message) {
        super(message);
    }

    private GwtKapuaException(String message, Throwable cause) {
        super(message, cause);
    }

    private GwtKapuaException(Throwable t) {
        super(t);
    }

    /**
     * Builds a new GwtKapuaException instance based on the supplied GwtKapuaErrorCode, an optional Throwable cause.
     *
     * @param errorCode
     * @param cause
     * @param remainingLoginAttempts
     */
    public GwtKapuaException(GwtKapuaErrorCode errorCode, Throwable cause, Integer remainingLoginAttempts) {
        super(cause);

        this.errorCode = errorCode;
        this.remainingLoginAttempts = remainingLoginAttempts;
    }

    public GwtKapuaException(GwtKapuaErrorCode errorCode, Throwable cause, String... arguments) {
        super(cause);

        this.errorCode = errorCode;
        this.arguments = arguments;
    }

    /**
     * Factory method to build an GwtKapuaException with the GwtKapuaErrorCode.INTERNAL_ERROR code providing a cause and a message.
     *
     * @param cause
     * @param message
     * @return
     */
    public static GwtKapuaException internalError(Throwable cause, String message) {
        return new GwtKapuaException(GwtKapuaErrorCode.INTERNAL_ERROR, cause, message);
    }

    public GwtKapuaErrorCode getCode() {
        return errorCode;
    }

    @Override
    public String getMessage() {
        return getLocalizedMessage();
    }

    @Override
    public String getLocalizedMessage() {

        String msg = errorCode.toString();
        try {
            ValidationMessages msgs = GWT.create(ValidationMessages.class);
            String msgPattern = msgs.getString(errorCode.name());
            if (msgPattern != null) {
                msg = format(msgPattern, arguments);
            }

            if (remainingLoginAttempts != null) {
                if (remainingLoginAttempts > 0) {
                    msgPattern = msgs.getString(errorCode.name() + "_LOGIN_ATTEMPTS");
                    if (msgPattern != null) {
                        msg += " " + format(msgPattern, new Object[]{remainingLoginAttempts});
                    }
                } else {
                    msg += " " + msgs.getString(errorCode.name() + "_USER_LOCKED");
                }
            }
        } catch (MissingResourceException e) {
            // ignore
        }
        return msg;
    }

    public String[] getArguments() {
        return arguments;
    }

    private String format(String s, Object[] arguments) {

        if (arguments == null) {
            return s;
        }

        // A very simple implementation of format
        int i = 0;
        while (i < arguments.length) {
            String delimiter = "{" + i + "}";
            while (s.contains(delimiter)) {
                s = s.replace(delimiter, String.valueOf(arguments[i]));
            }
            i++;
        }
        return s;
    }
}
